from typing import Dict, List, Any, Optional
import requests
import socket
import ssl
from datetime import datetime

class VulnerabilityChecker:
    """
    Tespit edilen servislerde güvenlik açıklarını kontrol eden sınıf.
    """
    def __init__(self):
        """
        VulnerabilityChecker sınıfını başlatır.
        """
        self.vulnerability_database = {}
        # Gerçek uygulamada bu veritabanı dışarıdan yüklenebilir
    
    def check_vulnerabilities(self, target: str, services: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Tespit edilen servislerde güvenlik açıklarını kontrol eder.
        
        Args:
            target: Hedef IP adresi veya domain adı
            services: Tespit edilen servislerin listesi
            
        Returns:
            Tespit edilen güvenlik açıklarının listesi
        """
        vulnerabilities = []
        
        for service in services:
            service_name = service.get('service', '').lower()
            port = service.get('port')
            version = service.get('version', '')
            
            # Servise özel kontroller
            if service_name == 'http' or service_name == 'https':
                web_vulns = self._check_web_vulnerabilities(target, port, service_name == 'https')
                vulnerabilities.extend(web_vulns)
            
            elif service_name == 'ssh':
                ssh_vulns = self._check_ssh_vulnerabilities(target, port, version)
                vulnerabilities.extend(ssh_vulns)
            
            elif service_name == 'ftp':
                ftp_vulns = self._check_ftp_vulnerabilities(target, port, version)
                vulnerabilities.extend(ftp_vulns)
            
            # Genel sürüm kontrolleri
            version_vulns = self._check_version_vulnerabilities(service_name, version)
            if version_vulns:
                vulnerabilities.extend(version_vulns)
        
        return vulnerabilities
    
    def _check_web_vulnerabilities(self, target: str, port: int, is_https: bool = False) -> List[Dict[str, Any]]:
        """
        Web servislerinde güvenlik açıklarını kontrol eder.
        
        Args:
            target: Hedef IP adresi veya domain adı
            port: Web servisinin çalıştığı port
            is_https: HTTPS mi?
            
        Returns:
            Tespit edilen güvenlik açıklarının listesi
        """
        vulnerabilities = []
        protocol = 'https' if is_https else 'http'
        url = f"{protocol}://{target}:{port}"
        
        try:
            # HTTP başlıklarını kontrol et
            response = requests.get(url, timeout=5, verify=False)
            headers = response.headers
            
            # Güvenlik başlıkları kontrolü
            security_headers = {
                'Strict-Transport-Security': {
                    'name': 'HTTP Strict Transport Security (HSTS) Eksik',
                    'severity': 'Orta',
                    'description': 'HSTS başlığı eksik. Bu, HTTPS bağlantılarını zorunlu kılmak için gereklidir.',
                    'recommendation': 'Strict-Transport-Security başlığını ekleyin.'
                },
                'X-Content-Type-Options': {
                    'name': 'X-Content-Type-Options Eksik',
                    'severity': 'Düşük',
                    'description': 'X-Content-Type-Options başlığı eksik. Bu, MIME türü koruması sağlar.',
                    'recommendation': 'X-Content-Type-Options: nosniff başlığını ekleyin.'
                },
                'X-Frame-Options': {
                    'name': 'X-Frame-Options Eksik',
                    'severity': 'Orta',
                    'description': 'X-Frame-Options başlığı eksik. Bu, clickjacking saldırılarını önler.',
                    'recommendation': 'X-Frame-Options: DENY veya SAMEORIGIN başlığını ekleyin.'
                },
                'Content-Security-Policy': {
                    'name': 'Content-Security-Policy Eksik',
                    'severity': 'Orta',
                    'description': 'Content-Security-Policy başlığı eksik. Bu, XSS saldırılarını önlemeye yardımcı olur.',
                    'recommendation': 'Content-Security-Policy başlığını ekleyin.'
                }
            }
            
            for header, vuln_info in security_headers.items():
                if header not in headers:
                    vuln = vuln_info.copy()
                    vuln['target'] = target
                    vuln['port'] = port
                    vuln['service'] = 'HTTP/HTTPS'
                    vulnerabilities.append(vuln)
            
            # SSL/TLS kontrolü (HTTPS için)
            if is_https:
                ssl_vulns = self._check_ssl_vulnerabilities(target, port)
                vulnerabilities.extend(ssl_vulns)
            
        except requests.exceptions.RequestException:
            pass
        
        return vulnerabilities
    
    def _check_ssl_vulnerabilities(self, target: str, port: int) -> List[Dict[str, Any]]:
        """
        SSL/TLS yapılandırmasını kontrol eder.
        
        Args:
            target: Hedef IP adresi veya domain adı
            port: SSL/TLS servisinin çalıştığı port
            
        Returns:
            Tespit edilen güvenlik açıklarının listesi
        """
        vulnerabilities = []
        
        try:
            # SSL bağlantısı kur
            context = ssl.create_default_context()
            with socket.create_connection((target, port)) as sock:
                with context.wrap_socket(sock, server_hostname=target) as ssock:
                    cert = ssock.getpeercert()
                    
                    # Sertifika geçerlilik süresi kontrolü
                    if cert and 'notAfter' in cert:
                        expiry_date = ssl.cert_time_to_seconds(cert['notAfter'])
                        current_time = datetime.now().timestamp()
                        days_left = (expiry_date - current_time) / (60 * 60 * 24)
                        
                        if days_left < 0:
                            vulnerabilities.append({
                                'name': 'SSL Sertifikası Süresi Dolmuş',
                                'severity': 'Kritik',
                                'description': f'SSL sertifikasının süresi dolmuş.',
                                'recommendation': 'SSL sertifikasını yenileyin.',
                                'target': target,
                                'port': port,
                                'service': 'SSL/TLS'
                            })
                        elif days_left < 30:
                            vulnerabilities.append({
                                'name': 'SSL Sertifikası Yakında Sona Erecek',
                                'severity': 'Orta',
                                'description': f'SSL sertifikası {int(days_left)} gün içinde sona erecek.',
                                'recommendation': 'SSL sertifikasını yenileyin.',
                                'target': target,
                                'port': port,
                                'service': 'SSL/TLS'
                            })
                    
                    # SSL/TLS protokol ve şifreleme kontrolü
                    # Bu kısım daha karmaşık olabilir ve daha fazla araştırma gerektirir
        
        except (socket.error, ssl.SSLError):
            pass
        
        return vulnerabilities
    
    def _check_ssh_vulnerabilities(self, target: str, port: int, version: str) -> List[Dict[str, Any]]:
        """
        SSH servisinde güvenlik açıklarını kontrol eder.
        
        Args:
            target: Hedef IP adresi veya domain adı
            port: SSH servisinin çalıştığı port
            version: SSH sürümü
            
        Returns:
            Tespit edilen güvenlik açıklarının listesi
        """
        vulnerabilities = []
        
        # Eski SSH sürümü kontrolü
        if version and ('1.0' in version or '2.0' in version):
            vulnerabilities.append({
                'name': 'Eski SSH Sürümü',
                'severity': 'Yüksek',
                'description': f'Eski SSH sürümü tespit edildi: {version}',
                'recommendation': 'SSH servisini güncelleyin.',
                'target': target,
                'port': port,
                'service': 'SSH'
            })
        
        return vulnerabilities
    
    def _check_ftp_vulnerabilities(self, target: str, port: int, version: str) -> List[Dict[str, Any]]:
        """
        FTP servisinde güvenlik açıklarını kontrol eder.
        
        Args:
            target: Hedef IP adresi veya domain adı
            port: FTP servisinin çalıştığı port
            version: FTP sürümü
            
        Returns:
            Tespit edilen güvenlik açıklarının listesi
        """
        vulnerabilities = []
        
        # Anonim FTP erişimi kontrolü
        # Bu kısım gerçek bir FTP bağlantısı gerektirir
        
        return vulnerabilities
    
    def _check_version_vulnerabilities(self, service_name: str, version: str) -> List[Dict[str, Any]]:
        """
        Servis sürümüne göre bilinen güvenlik açıklarını kontrol eder.
        
        Args:
            service_name: Servis adı
            version: Servis sürümü
            
        Returns:
            Tespit edilen güvenlik açıklarının listesi
        """
        # Bu fonksiyon, gerçek bir güvenlik açığı veritabanına bağlanarak
        # belirli servis sürümlerindeki bilinen güvenlik açıklarını kontrol edebilir
        return []